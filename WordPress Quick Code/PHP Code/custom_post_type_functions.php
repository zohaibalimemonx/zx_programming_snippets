<?php 

/**
 * Registers a new post type
 * @uses $wp_post_types Inserts new post type object into the list
 *
 * @param string  Post type key, must not exceed 20 characters
 * @param array|string  See optional args description above.
 * @return object|WP_Error the registered post type object, or an error object
 */
function prefix_register_name() {

	$labels = array(
		'name'               => __( 'Plural Name', 'text-domain' ),
		'singular_name'      => __( 'Singular Name', 'text-domain' ),
		'add_new'            => _x( 'Add New Singular Name', 'text-domain', 'text-domain' ),
		'add_new_item'       => __( 'Add New Singular Name', 'text-domain' ),
		'edit_item'          => __( 'Edit Singular Name', 'text-domain' ),
		'new_item'           => __( 'New Singular Name', 'text-domain' ),
		'view_item'          => __( 'View Singular Name', 'text-domain' ),
		'search_items'       => __( 'Search Plural Name', 'text-domain' ),
		'not_found'          => __( 'No Plural Name found', 'text-domain' ),
		'not_found_in_trash' => __( 'No Plural Name found in Trash', 'text-domain' ),
		'parent_item_colon'  => __( 'Parent Singular Name:', 'text-domain' ),
		'menu_name'          => __( 'Plural Name', 'text-domain' ),
	);

	$args = array(
		'labels'              => $labels,
		'hierarchical'        => false,
		'description'         => 'description',
		'taxonomies'          => array(),
		'public'              => true,
		'show_ui'             => true,
		'show_in_menu'        => true,
		'show_in_admin_bar'   => true,
		'menu_position'       => null,
		'menu_icon'           => null,
		'show_in_nav_menus'   => true,
		'publicly_queryable'  => true,
		'exclude_from_search' => false,
		'has_archive'         => true,
		'query_var'           => true,
		'can_export'          => true,
		'rewrite'             => true,
		'capability_type'     => 'post',
		'supports'            => array(
			'title',
			'editor',
			'author',
			'thumbnail',
			'excerpt',
			'custom-fields',
			'trackbacks',
			'comments',
			'revisions',
			'page-attributes',
			'post-formats',
		),
	);

	register_post_type( 'slug', $args );
}

add_action( 'init', 'prefix_register_name' );

?>


<?php

/**
 * Generated by the WordPress Meta Box generator
 * at http://jeremyhixon.com/tool/wordpress-meta-box-generator/
 */

/**
 * Create Custom Fields
 * 
 * To Get Custom Field = <?php echo get_post_meta( get_the_ID(), 'FIELD_NAME', true ); ?>
 */
class Ul_custom_fields{


	function __construct(){
		 
		 add_action( 'add_meta_boxes',  array( $this, 'price_section_add_meta_box') );
		 add_action( 'save_post', array( $this, 'price_section_save') );
	}


	public function price_section_get_meta($value){
		global $post;
		$field = get_post_meta( $post->ID, $value, true );
		if ( ! empty( $field ) ) {
			return is_array( $field ) ? stripslashes_deep( $field ) : stripslashes( wp_kses_decode_entities( $field ) );
		} else {
			return false;
		}
	}
	public function price_section_add_meta_box() {
		add_meta_box(
			'price_section-price-section',
			__( 'FIELD CONTAINER BOX LABEL', 'price_section' ),
			array( $this, 'price_section_html'),
			'POST_TYPE_SLUG',	/* POST TYPE SLUG */
			'normal', /* 'normal' = show under general text box, 'side' = show on side */
			'high'	/* 'high' = show under right after general text box, 'low', 'core', 'deafult' */
		);
	}
	public function price_section_html( $post) {
		wp_nonce_field( '_price_section_nonce', 'price_section_nonce' ); ?>
			
			<!-- Create New Field On Front - End - Fill > 'FIELD_NAME' && 'FIELD LABEL' -->
			<p>
    			<label for="FIELD_NAME" class="cpf-label"><?php _e( 'FIELD LABEL', 'price_section' ); ?></label>
    			<input type="text" name="FIELD_NAME" class="cpf-field" value="<?php echo $this->price_section_get_meta( 'FIELD_NAME' ); ?>">
			</p>

			<?php
		}

	public	function price_section_save( $post_id ) {

		if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) return;
		if ( ! isset( $_POST['price_section_nonce'] ) || ! wp_verify_nonce( $_POST['price_section_nonce'], '_price_section_nonce' ) ) return;
		if ( ! current_user_can( 'edit_post', $post_id ) ) return;

		// Save New Field On Back - End - Fill > 'FIELD_NAME'

		if ( isset( $_POST['FIELD_NAME'] ) )
			update_post_meta( $post_id, 'FIELD_NAME', esc_attr( $_POST['FIELD_NAME'] ) );
		
	}

}
new Ul_custom_fields();

?>
